#+TITLE: Emacs configuration
#+AUTHOR: Michael Zapata
#+EMAIL: michael.zapata@protonmail.com

* Basic configuration

** Keep the starting screen clean

Once you've gone through the tutorial, there's no real need to keep the startup
layout.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil)
#+END_SRC

** Keep the GUI minimalistic

As I want my editor to get as much screen estate as possible, and prefer
keyboard-driven workflows, remove every visible bar, keeping only the mode-line.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Set default font

I am partial to Adobe Source Code Pro for some reason.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Source Code Pro-10"))
#+END_SRC

** Sane defaults

Most of them are inspired by https://github.com/hrs/sensible-defaults.el

*** Temporary files management

Let's be honest, =emacs= leaves a lot of temporary files, and I like my listings
to be clean.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

*** 80 columns

I like having multiple buffers open at the same time, a 80 columns workflow
works best like this.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

*** Display column number

It's a useful info to get in the mode-line, and it doesn't take much space either.

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Line numbers in the gutter

I find having numbers helps me navigate around more quickly with =j=/=k=.

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC
*** Whitespaces

I used to highlight them, but removing them is fine by me.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Garbage collection

Lisp is a GC'ed language. Upgrade the GC threshold from 0.76MB to 20MB, for
some speed-ups.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** No typewriter shenanigans

One space after a period is enough.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** CamelCase improvements

Treat CamelCasedWords as separate words. That's something I've never seen
in vim, thanks elisp!

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

*** Syntax Highlighting

Use it whenever possible.

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

*** Mouse yank

By default, it inserts where the mouse cursor is. Insert at the current cursor point instead.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

*** Shorten question

It quickly gets cumbersome to type 'yes' each time.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Package management

As a vim user, I am used to have a package manager taking care of things for me.

** Use a package manager

[[https://github.com/jwiegley/use-package][=use-package=]] is the most advanced
one, allowing lazy-loading and fine-grained control that is not found by default
in emacs.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile (require 'use-package))
#+END_SRC

** Plugins

Plugins are the bread and butter of an emacs workflow, there's a few nice things
in there!

*** Theme

As I spend a lot of time in my editor, I might as well make it pretty! I also
use the themed modeline, for now.

Note: =M-x all-the-icons-install-fonts= should be called to make the line display
the right glyphs instead of your standard garbled unicode icon.

#+BEGIN_SRC emacs-lisp
(use-package zerodark-theme
  :config
  (zerodark-setup-modeline-format)
  (load-theme 'zerodark t))
#+END_SRC

*** Static checker

Use =flycheck=, it seems to be the standard in there.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

*** Auto-complete

=company-mode= works well enough for me, and there's plenty of 3rd-party
packages enhancing it if need be.

#+BEGIN_SRC emacs-lisp
(use-package company
  :init (global-company-mode))
#+END_SRC

*** Fancy HTML export

The default org-mode html export function is not really producing beautiful
html files. This plugin is using twitter bootstrap, but for orgmode, and it
looks great by default!

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs)
#+END_SRC

** Language modes

Emacs doesn't necessarily have the best coverage when it comes to programming
languages, but that's ok, you can find modes for pretty much every language.

*** Erlang

I'm using erlang around here. \o/
#+BEGIN_SRC emacs-lisp
(use-package erlang
  :ensure t)
#+END_SRC

*** Rust

That mode doesn't set itself to the =auto-mode-alist=, so we need to do that
ourselves. Thankfully, =use-package= is giving us some help there.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
#+END_SRC

* Vim experience

Disclaimer: I am a vim user at heart. I will try to emulate all the good parts.

** Install it

Evil mode is the emacs plugin that is allowing me to switch from vim to emacs.
It provides a complete modal interface in line with the vanilla vim
experience, which is the main thing I cannot edit without.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (evil-mode 1))
#+END_SRC

** Install =evil-surround=

It's one of the most interesting edition plugin available for vim, no
reason not to use it here.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :init
  (global-evil-surround-mode 1))
#+END_SRC

** Some default config

Vim has a certain behaviour by default.

*** Matching parentheses highlight

It's a small detail, sure, but it's a nice one.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

*** Newline at the end of a file

POSIX compliance is expected from some tools, let's keep them happy.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline 1)
#+END_SRC

*** Do not bind =RET= and =SPC=

As they are redundant with =j= and =l= respectively, do not let evil take precedence there.

#+BEGIN_SRC emacs-lisp
(defun my-move-key (keymap-from keymap-to key)
  "Moves key binding from one keymap to another, deleting from the old location."
  (define-key keymap-to key (lookup-key keymap-from key))
  (define-key keymap-from key nil))

(my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
(my-move-key evil-motion-state-map evil-normal-state-map " ")
#+END_SRC
