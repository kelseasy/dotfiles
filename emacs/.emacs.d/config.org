#+TITLE: Emacs configuration
#+AUTHOR: Kelsey Zapata
#+EMAIL: key@kelseyz.org

* Basic configuration

** Keep the starting screen clean

Once you've gone through the tutorial, there's no real need to keep the startup
layout.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil)
#+END_SRC

** Keep the GUI minimalistic

As I want my editor to get as much screen estate as possible, and prefer
keyboard-driven workflows, remove every visible bar, keeping only the mode-line.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Set default font

I am partial to Adobe Source Code Pro for some reason.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Hasklig-12"))
#+END_SRC

** Sane defaults

Most of them are inspired by https://github.com/hrs/sensible-defaults.el

*** Temporary files management

Let's be honest, =emacs= leaves a lot of temporary files, and I like my listings
to be clean.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

*** 80 columns

I like having multiple buffers open at the same time, a 80 columns workflow
works best like this.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

*** Display column number

It's a useful info to get in the mode-line, and it doesn't take much space either.

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Line numbers in the gutter

I find having numbers helps me navigate around more quickly with =j=/=k=.

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

*** Whitespaces

I used to highlight them, but removing them is fine by me.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Garbage collection

Lisp is a GC'ed language. Upgrade the GC threshold from 0.76MB to 20MB, for
some speed-ups.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** No typewriter shenanigans

One space after a period is enough.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** CamelCase improvements

Treat CamelCasedWords as separate words. That's something I've never seen
in vim, thanks elisp!

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

*** Syntax Highlighting

Use it whenever possible.

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

*** Mouse yank

By default, it inserts where the mouse cursor is. Insert at the current cursor point instead.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

*** Shorten question

It quickly gets cumbersome to type 'yes' each time.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Pretty symbols

It's pretty, what can I say?

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

* Package management

As a vim user, I am used to have a package manager taking care of things for me.

** Use a package manager

[[https://github.com/jwiegley/use-package][=use-package=]] is the most advanced
one, allowing lazy-loading and fine-grained control that is not found by default
in emacs.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile (require 'use-package))

;; Plugin to check if a binary exists
(use-package use-package-ensure-system-package)
#+END_SRC

* Plugins

Plugins are the bread and butter of an emacs workflow, there's a few nice things
in there!

** Modeline

The default modeline is underwhelming at best, let's improve on that.

*** Pretty modeline

The default one is pretty basic, with no icons whatsoever to keep it simple, this
fixes it. And it's wicked fast to boot!

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :defer t
  :init (doom-modeline-init)
  :custom (doom-modeline-buffer-file-name-style 'truncate-with-project))
#+END_SRC

*** Cleaner modeline

I have a lot of minor modes running most of the time, which makes the modeline
slightly overloaded. =diminish= is well-integrated with =use-package=.

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

** Ligatures

Add ligatures using Hasklig, which is basically Source Code Pro with ligatures.

#+BEGIN_SRC emacs-lisp
(use-package hasklig-mode
  :hook prog-mode)
#+END_SRC

** Theme

Moe is a nice theme that switches between light and dark by itself, neat!

#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :init (require 'moe-theme-switcher))
#+END_SRC

** Static checker

Use =flycheck=, it seems to be the standard in there.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

** Auto-complete

=company-mode= works well enough for me, and there's plenty of 3rd-party
packages enhancing it if need be.

#+BEGIN_SRC emacs-lisp
(use-package company
  :init (global-company-mode)
  :diminish)
#+END_SRC

** Minibuffer completion

Makes completing command a slightly better experience.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  :init (ivy-mode t)
  :bind (("M-x" . counsel-M-x))
  :diminish
)
#+END_SRC

** Language modes

Emacs doesn't necessarily have the best coverage when it comes to programming
languages, but that's ok, you can find modes for pretty much every language.

*** Erlang

I'm using erlang around here. \o/
#+BEGIN_SRC emacs-lisp
(use-package erlang
  :ensure t)
#+END_SRC

*** Rust

That mode doesn't append itself to the =auto-mode-alist=, so we need to do that
ourselves. Thankfully, =use-package= is giving us some help there.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
#+END_SRC

But that's not enough, as =rust-mode= does not offer a completion engine by
default. For that, we use the completion engine that every editor uses:
[[https://github.com/racer-rust/racer][=racer=]]. It needs to be installed using =cargo install racer= beforehand.

Note: I use =:config= since I cannot get =:hook= to work properly there for
some reason.

#+BEGIN_SRC emacs-lisp
(use-package racer
  :after (rust-mode company)
  :config (add-hook 'rust-mode-hook #'racer-mode)
          (add-hook 'racer-mode-hook #'eldoc-mode)
          (add-hook 'racer-mode-hook #'company-mode))
#+END_SRC

*** Haskell

I'm hacking on my xmonad config, so this is useful. And I really should get
back in it at some point too.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC

*** Ruby

I do some Ruby these days. I don't particularly like it, but I might as well
make my time in Ruby-land a little better.

Adding =end= automatically is nice for example.

#+BEGIN_SRC emacs-lisp
(use-package ruby-end)
#+END_SRC

*** Typescript

Types are neat. Typescript is a pragmatic solution to bring types to Javascript,
and not only in the backend, so let's bring that sweet syntax highlight to tsx
files too.

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.tsx\\'")
#+END_SRC

=tide= is using the same LSP as VSCode, and let's be honest, it has superb
completion when it comes to typescript! So let's use it!

#+BEGIN_SRC emacs-lisp
(use-package tide
  :hook (typescript-mode . tide-setup))
#+END_SRC

** Project-scoped helpers

Making tooling aware of project structures is usually a good idea, simply
because it makes it that much more easy to find whatever I'm looking for.

#+BEGIN_SRC emacs-lisp
(use-package projectile)
(use-package counsel-projectile
  :after (counsel projectile)
)
#+END_SRC

* Vim experience

Disclaimer: I am a vim user at heart. I will try to emulate all the good parts.

** Install it

Evil mode is the emacs plugin that is allowing me to switch from vim to emacs.
It provides a complete modal interface in line with the vanilla vim
experience, which is the main thing I cannot edit without.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (evil-mode 1)
  :config
    (diminish 'undo-tree-mode)
#+END_SRC

*** Remap arrow keys

Since I don't use arrows for movement, I usually have them moving between
splits.

#+BEGIN_SRC emacs-lisp
    (evil-global-set-key 'motion (kbd "<up>") 'windmove-up)
    (evil-global-set-key 'motion (kbd "<down>") 'windmove-down)
    (evil-global-set-key 'motion (kbd "<left>") 'windmove-left)
    (evil-global-set-key 'motion (kbd "<right>") 'windmove-right)
#+END_SRC

*** Do not bind =RET= and =SPC=

As they are redundant with =j= and =l= respectively, do not let evil take precedence there.

#+BEGIN_SRC emacs-lisp
(defun my-move-key (keymap-from keymap-to key)
  "Moves key binding from one keymap to another, deleting from the old location."
  (define-key keymap-to key (lookup-key keymap-from key))
  (define-key keymap-from key nil))

(my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
(my-move-key evil-motion-state-map evil-normal-state-map " ")
#+END_SRC

*** Load leader beforehand

#+BEGIN_SRC emacs-lisp
  :after evil-leader)
#+END_SRC

** Install =evil-surround=

It's one of the most interesting edition plugin available for vim, no
reason not to use it here.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :init
  (global-evil-surround-mode 1))
#+END_SRC

** Some default config

Vim has a certain behaviour by default.

*** Matching parentheses highlight

It's a small detail, sure, but it's a nice one.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

*** Newline at the end of a file

POSIX compliance is expected from some tools, let's keep them happy.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline 1)
#+END_SRC

*** Use modes when committing

It's seriously super annoying to not be able to.

#+BEGIN_SRC emacs-lisp
(add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC

*** Leader key

It's pretty nifty to avoid RSI-inducing movements, which are one of the reasons
I do use vim-style commands to begin with. And yes, I know, I'm using a weird
leader key.

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<muhenkan>")
    (evil-leader/set-key "p" 'counsel-projectile-find-file)
    (evil-leader/set-key "r" 'counsel-projectile-rg))
#+END_SRC

* Org mode tweaks

I'm starting to dive more into the org ecosystem.

** Publishing list

Org offers facilities to automate most of the publishing itself, which
is better than handling all of that by hand!

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
    '(("public-notes"
       :base-directory "~/org/"
       :base-extension "org"
       :publishing-directory "~/org/public/"
       :recursive t
       :publishing-function org-twbs-publish-to-html
       :html-postamble "<p>Copyright © 2018 - %a - Licensed under
  <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\">CC BY SA 4.0</a> -
  Powered by <a href=\"https://www.gnu.org/software/emacs/\">Emacs</a></p>"))
)
#+END_SRC

** Code blocks

*** Syntax highlighting

It's kinda useful to avoid silly typos in code examples.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** "Native" tabs

It uses the major mode settings to infer tabs, smart!

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

** Fancy HTML export

The default org-mode html export function is not really producing beautiful
html files. This plugin is using twitter bootstrap, but for orgmode, and it
looks great by default!

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs)
#+END_SRC

I also want nice quotes on export, because that's possible.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

** Templates

Why type =<s= to then type =emacs-lisp= when I could just do =<el= instead?

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Also create rust blocks in the same fashion with =<r=.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("r" "#+BEGIN_SRC rust\n?\n#+END_SRC"))
#+END_SRC

** Spell checking

While I do consider my English to be mostly okay, I still make mistakes. Worse,
I may not realise it.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Fancy stuff

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

And that's about it really.
